#–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å–±–æ—Ä–∞ email –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
from aiogram import types
import re
from loader import dp
from utils.userstates import UserState
from utils.message_queue import MessageQueue
from utils.db_apis.settings import addEmail
message_queue = MessageQueue()


async def is_valid_email_format(email):
    email_pattern = r'^[\w\.-]+@[\w\.-]+$'
    if re.match(email_pattern, email):
        return True
    else:
        return False

@dp.message_handler(commands=['email'], state=UserState.AUTH)
async def command_email(message: types.Message):
    data = message.text.split()
    if len(data) == 2:
        if await is_valid_email_format(data[1]):
            await message_queue.add_message(0,chat_id=message.from_user.id,text=f"‚úÖ –í—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π Email: {data[1]}")
            await addEmail(message.from_user.id,data[1])
        else:
            await message_queue.add_message(0,chat_id=message.from_user.id,text=f"‚ùå Email –∞–¥—Ä–µ—Å—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")
    else:
        await message_queue.add_message(0,chat_id=message.from_user.id,text=f"üöß Email –∞–¥—Ä–µ—Å—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ email –∏–ª–∏ —É–∫–∞–∑–∞–ª–∏ —á—Ç–æ-—Ç–æ –ª–∏—à–Ω–µ–µ. \n\n–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: \n/email mail123@example.com")
